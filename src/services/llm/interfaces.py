from abc import ABC, abstractmethod
from typing import List, AsyncIterable

from src.entities.captions import Captions
from src.entities.history import History
from src.entities.language import Language, get_language_name

ENHANCE_HISTORY_PROMPT_KEY = """
ACT AS um roteirista especialista e produtor de áudio para histórias virais do TikTok. Sua especialidade é adaptar textos crus de fóruns online para scripts de vídeo envolventes e pré-otimizados para o motor avançado de Text-to-Speech "Fish Audio".

**SUA TAREFA:** Transformar o post do Reddit em português que eu forneci abaixo em um script compelling para um vídeo do TikTok. Não apenas traduza. Adapte-o para ter o máximo impacto e **incorpore tags de controle avançadas do Fish Audio** para guiar a performance vocal, pronúncia e pacing.

**REGRA PRIMORDIAL - PONTUAÇÃO TTS:**
*   **USE APENAS ESTES SINAIS:** ponto final (.**), vírgula (**,**), ponto de exclamação (**!**), ponto de interrogação (**?**) e reticências (**...**) para pausas narrativas.
*   **PROIBIDO:** **NÃO USE** ponto-e-vírgula (**;**), travessão (**—** ou **--**) ou qualquer outro caractere especial para pausas. O TTS não os interpreta corretamente.
*   **CONTROLE DE PAUSA:** Para controlar **precisamente** a duração de uma pausa, use **EXCLUSIVAMENTE** as tags `(break)` para pausa curta e `(long-break)` para pausa longa e dramática.

**POSTAGEM ORIGINAL DO REDDIT EM {language}:**
{content}

**REGRAS DE ADAPTAÇÃO & TAGGING:**

1.  **ADAPTAÇÃO PRINCIPAL:**
    *   **Tom & Estilo:** O tom deve ser **dramático, conversacional e relátavel**. Escreva como se um amigo estivesse contando essa história chocante. Use português brasileiro coloquial.
    *   **Gancho:** A primeira linha deve ser um gancho irresistível que resuma o conflito central.
    *   **Ritmo (Pacing):** A história deve ser concisa. Remova informações supérfluas e foque nos pontos de virada emocionais chave.

2.  **TAGS DE EMOTION & TONALIDADE (OBRIGATÓRIO):**
    *   **Sintaxe:** Todas as tags DEVEM estar entre parênteses `()`.
    *   **Posicionamento:**
        *   **Tags de Emoção (ex., `(nervoso)`, `(triste)`, `(animado)`):** DEVEM ser colocadas no início de uma frase ou oração.
        *   **Tags de Tom/Paralinguagem (ex., `(gritando)`, `(sussurrando)`, `(rindo)`):** Podem ser colocadas em qualquer lugar.
    *   **Estratégia:** Mapeie o arco emocional da história. Comece com `(sincero)` ou `(calmo)`, construa com `(confuso)` ou `(ansioso)`, chegue ao clímax com `(gritando)` ou `(furioso)` e resolva com `(triste)` ou uma pergunta.

3.  **PARALINGUAGEM & EFEITOS ESPECIAIS (RECOMENDADO):**
    *   **Pausas:** Use `(break)` para uma pausa curta e `(long-break)` para uma pausa dramática e estendida. Coloque-as após vírgulas, para efeito, ou antes de uma grande revelação. **ESTAS SÃO SUAS FERRAMENTAS PRINCIPAIS PARA PAUSA.**
    *   **Respirações & Sons:** Use `(respirando)` para simular uma inspirada (de choque) ou expirada (de alívio). Use `(suspiro)` para decepção.
    *   **Palavras de Pausa:** Integre preenchedores naturais como "um", "ahn", "tipo" para controlar o ritmo e adicionar realismo.
    *   **Exemplo de Uso:** `(suspiro) Aff... (break) eu nem sei por onde começar.`

4.  **CONTROLE DE FONEMA (AVANÇADO - USE SE NECESSÁRIO):**
    *   **Propósito:** Forçar a pronúncia correta de uma palavra ou nome que o TTS possa pronunciar mal.
    *   **Sintaxe (Para Português):** Como o CMU Arpabet é para inglês, você precisará usar seu conhecimento de fonética do português brasileiro para soletrar a palavra som por som. Cerque a soletração fonética com as tags `<|phoneme_start|>` e `<|phoneme_end|>`.
    *   **Exemplo:** Se o TTS pronuncia erroneamente "auge" como "augue", você pode corrigir: `no <|phoneme_start|>au ji<|phoneme_end|> do sucesso...`

**FORMATO DE SAÍDA FINAL:**
Forneça **APENAS** a história totalmente adaptada, etiquetada e otimizada em português brasileiro como um único parágrafo limpo. Esta saída está pronta para ser copiada e colada diretamente no mecanismo Fish Audio TTS com a normalização desativada para o melhor desempenho das tags.

Não adicione qualquer outro comentário, explicação ou texto fora do parágrafo final.
"""


ENHANCE_CAPTIONS_PROMPT = """
ACT AS a professional subtitle editor and proofreader. Your task is to correct spelling, grammar, and punctuation errors in a transcript generated by an ASR system (OpenAI's Whisper).

**INSTRUCTIONS:**
1.  **PRESERVE STRUCTURE:** You must maintain the exact same segment list structure and the precise `start` and `end` timestamps. **Do not change the timing.**
2.  **CORRECT ERRORS:** Correct any and all errors in the `text` field of each segment. This includes:
    *   Spelling mistakes (e.g., "I am" instead of "I um")
    *   Missing punctuation (e.g., adding a period or comma where it makes sense)
    *   Incorrect capitalization (e.g., starting sentences with a capital letter)
    *   Grammatical errors (e.g., verb agreement)
3.  **MINIMAL MERGING (Optional):** You are allowed to **ONLY** merge two consecutive segments if the first segment is a single, short word that was incorrectly split (e.g., a determiner like "a" or "the" separated from its noun). This is to fix obvious ASR splitting errors, not to rewrite the flow.
    *   **IF YOU MERGE:** You must combine the text and update the `end` time of the first segment to match the `end` time of the second segment. You must then **DELETE** the now-redundant second segment and re-index the list.
4.  **CONTEXT AWARENESS:** Use the provided conversation history for context to resolve ambiguities (e.g., distinguishing between "there", "their", and "they're").

**CONVERSATION HISTORY (for context):**
{content}

**WHISPER CAPTIONS OUTPUT TO CORRECT:**
{captions_json}

**OUTPUT FORMAT:**
You must output **ONLY** a valid JSON object in the exact same format as the input, with corrected `text` fields and merged segments if applicable. Do not add any other commentary, explanations, or text outside the JSON object.
"""


class ILLMService(ABC):
    """Interface for LLM (Large Language Model) services"""

    def get_enhance_history_prompt(self, content: str, language: Language) -> str:
        return ENHANCE_HISTORY_PROMPT_KEY.format(
            content=content, language=get_language_name(language)
        )

    def get_enhance_captions_prompt(
        self, content: str, language: Language, original_captions: Captions
    ) -> str:
        return ENHANCE_CAPTIONS_PROMPT.format(
            content=content,
            language=get_language_name(language),
            captions_json=original_captions.model_dump_json(),
        )

    @abstractmethod
    async def enhance_history(
        self, title: str, content: str, language: Language
    ) -> AsyncIterable[str]:
        """Enhance a history using LLM to improve readability and engagement, streaming text tokens"""
        pass

    @abstractmethod
    async def enhance_captions(
        self, captions: Captions, history: History, language: Language
    ) -> Captions:
        """Enhance captions using LLM to improve readability and timing"""
        pass
